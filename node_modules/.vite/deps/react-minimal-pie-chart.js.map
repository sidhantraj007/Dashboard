{
  "version": 3,
  "sources": ["../../react-minimal-pie-chart/src/utils.ts", "../../react-minimal-pie-chart/src/Chart/extendData.ts", "../../react-minimal-pie-chart/src/Label.tsx", "../../react-minimal-pie-chart/src/Chart/renderLabels.tsx", "../../react-minimal-pie-chart/node_modules/svg-partial-circle/index.js", "../../react-minimal-pie-chart/src/Path.tsx", "../../react-minimal-pie-chart/src/Chart/renderSegments.tsx", "../../react-minimal-pie-chart/src/Chart/Chart.tsx"],
  "sourcesContent": ["export function degreesToRadians(degrees: number) {\n  return (degrees * Math.PI) / 180;\n}\n\nexport function valueBetween(value: number, min: number, max: number) {\n  if (value > max) return max;\n  if (value < min) return min;\n  return value;\n}\n\nexport function extractPercentage(value: number, percentage: number) {\n  return (percentage / 100) * value;\n}\n\nexport function bisectorAngle(startAngle: number, lengthAngle: number) {\n  return startAngle + lengthAngle / 2;\n}\n\nexport function shiftVectorAlongAngle(angle: number, distance: number) {\n  const angleRadians = degreesToRadians(angle);\n  return {\n    dx: distance * Math.cos(angleRadians),\n    dy: distance * Math.sin(angleRadians),\n  };\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n\nexport function functionProp<Prop, Payload>(\n  prop: Prop,\n  payload?: Payload\n): Prop extends (...args: any) => any ? ReturnType<Prop> : Prop {\n  return typeof prop === 'function' ? prop(payload) : prop;\n}\n\nexport function makePropsWithDefaults<Result extends Object>(\n  props: Partial<Result>,\n  defaultProps: Result\n): Result {\n  const result: Result = Object.assign({}, defaultProps, props);\n\n  // @NOTE Object.assign doesn't default properties with undefined value (like React defaultProps does)\n  for (const key in defaultProps) {\n    if (props[key] === undefined) {\n      result[key] = defaultProps[key];\n    }\n  }\n\n  return result;\n}\n", "import { extractPercentage, valueBetween } from '../utils';\nimport type { Data, BaseDataEntry, ExtendedData } from '../commonTypes';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\n\nfunction sumValues<DataEntry extends BaseDataEntry>(\n  data: Data<DataEntry>\n): number {\n  let sum = 0;\n  for (let i = 0; i < data.length; i++) {\n    sum += data[i].value;\n  }\n  return sum;\n}\n\n// Append \"percentage\", \"degrees\" and \"startAngle\" to each data entry\nexport default function extendData<DataEntry extends BaseDataEntry>({\n  data,\n  lengthAngle: totalAngle,\n  totalValue,\n  paddingAngle,\n  startAngle: chartStartAngle,\n}: ChartProps<DataEntry>): ExtendedData<DataEntry> {\n  const total = totalValue || sumValues(data);\n  const normalizedTotalAngle = valueBetween(totalAngle, -360, 360);\n  const numberOfPaddings =\n    Math.abs(normalizedTotalAngle) === 360 ? data.length : data.length - 1;\n  const singlePaddingDegrees = Math.abs(paddingAngle) * Math.sign(totalAngle);\n  const degreesTakenByPadding = singlePaddingDegrees * numberOfPaddings;\n  const degreesTakenByPaths = normalizedTotalAngle - degreesTakenByPadding;\n  let lastSegmentEnd = 0;\n  const extendedData: ExtendedData<DataEntry> = [];\n\n  // @NOTE: Shall we evaluate percentage accordingly to dataEntry.value's sign?\n  for (let i = 0; i < data.length; i++) {\n    const dataEntry = data[i];\n    const valueInPercentage = total === 0 ? 0 : (dataEntry.value / total) * 100;\n    const degrees = extractPercentage(degreesTakenByPaths, valueInPercentage);\n    const startAngle = lastSegmentEnd + chartStartAngle;\n    lastSegmentEnd = lastSegmentEnd + degrees + singlePaddingDegrees;\n    extendedData.push(\n      Object.assign(\n        {\n          percentage: valueInPercentage,\n          startAngle,\n          degrees,\n        },\n        dataEntry\n      )\n    );\n  }\n  return extendedData;\n}\n", "import React from 'react';\nimport type { CSSProperties, SVGProps } from 'react';\nimport type {\n  ExtendedData,\n  BaseDataEntry,\n  LabelRenderFunction,\n} from './commonTypes';\n\nexport type LabelRenderProps<DataEntry extends BaseDataEntry> = {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  textAnchor: string;\n  dataEntry: ExtendedData<DataEntry>[number];\n  dataIndex: number;\n  style?: CSSProperties;\n};\n\nexport default function ReactMinimalPieChartLabel<\n  DataEntry extends BaseDataEntry\n>({\n  renderLabel,\n  labelProps,\n}: {\n  renderLabel: LabelRenderFunction<DataEntry>;\n  labelProps: LabelRenderProps<DataEntry>;\n}) {\n  const label = renderLabel(labelProps);\n\n  // Default label\n  if (typeof label === 'string' || typeof label === 'number') {\n    const { dataEntry, dataIndex, ...props } = labelProps;\n    return (\n      <text dominantBaseline=\"central\" {...props}>\n        {label}\n      </text>\n    );\n  }\n\n  if (React.isValidElement(label)) {\n    return label;\n  }\n\n  return null;\n}\n", "import React from 'react';\nimport Label from '../Label';\nimport {\n  bisectorAngle,\n  extractPercentage,\n  functionProp,\n  shiftVectorAlongAngle,\n} from '../utils';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\nimport type { LabelRenderProps } from '../Label';\nimport type { ExtendedData, BaseDataEntry } from '../commonTypes';\n\nfunction round(number: number): number {\n  const divisor = 1e14; // 14 decimals\n  return Math.round((number + Number.EPSILON) * divisor) / divisor;\n}\n\nfunction evaluateTextAnchorPosition({\n  labelPosition,\n  lineWidth,\n  labelHorizontalShift,\n}: {\n  labelPosition: number;\n  lineWidth: number;\n  labelHorizontalShift: number;\n}) {\n  const dx = round(labelHorizontalShift);\n  // Label in the vertical center\n  if (dx === 0) {\n    return 'middle';\n  }\n  // Outward label\n  if (labelPosition > 100) {\n    return dx > 0 ? 'start' : 'end';\n  }\n  // Inward label\n  const innerRadius = 100 - lineWidth;\n  if (labelPosition < innerRadius) {\n    return dx > 0 ? 'end' : 'start';\n  }\n  // Overlying label\n  return 'middle';\n}\n\nfunction makeLabelRenderProps<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>\n): LabelRenderProps<DataEntry>[] {\n  return data.map((dataEntry, index) => {\n    const segmentsShift = functionProp(props.segmentsShift, index) ?? 0;\n    const distanceFromCenter =\n      extractPercentage(props.radius, props.labelPosition) + segmentsShift;\n    const { dx, dy } = shiftVectorAlongAngle(\n      bisectorAngle(dataEntry.startAngle, dataEntry.degrees),\n      distanceFromCenter\n    );\n\n    // This object is passed as argument to the \"label\" function prop\n    const labelRenderProps: LabelRenderProps<DataEntry> = {\n      x: props.center[0],\n      y: props.center[1],\n      dx,\n      dy,\n      textAnchor: evaluateTextAnchorPosition({\n        labelPosition: props.labelPosition,\n        lineWidth: props.lineWidth,\n        labelHorizontalShift: dx,\n      }),\n      dataEntry,\n      dataIndex: index,\n      style: functionProp(props.labelStyle, index),\n    };\n\n    return labelRenderProps;\n  });\n}\n\nexport default function renderLabels<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>\n) {\n  const { label } = props;\n  if (label) {\n    return makeLabelRenderProps(data, props).map((labelRenderProps, index) => (\n      <Label\n        key={`label-${labelRenderProps.dataEntry.key || index}`}\n        renderLabel={label}\n        labelProps={labelRenderProps}\n      />\n    ));\n  }\n}\n", "'use strict'\n\n// from http://stackoverflow.com/a/18473154\nconst partialCircle = (cx, cy, r, start, end) => {\n\tconst length = end - start\n\tif (length === 0) return []\n\n\tconst fromX = r * Math.cos(start) + cx\n\tconst fromY = r * Math.sin(start) + cy\n\tconst toX = r * Math.cos(end) + cx\n\tconst toY = r * Math.sin(end) + cy\n\tconst large = Math.abs(length) <= Math.PI ? '0' : '1'\n\tconst sweep = length < 0 ? '0' : '1'\n\n\treturn [\n\t\t['M', fromX, fromY],\n\t\t['A', r, r, 0, large, sweep, toX, toY]\n\t]\n}\n\nmodule.exports = partialCircle\n", "import React from 'react';\nimport type { SVGProps } from 'react';\nimport partialCircle from 'svg-partial-circle';\nimport {\n  bisectorAngle,\n  degreesToRadians,\n  extractPercentage,\n  isNumber,\n  shiftVectorAlongAngle,\n  valueBetween,\n} from './utils';\n\nexport function makePathCommands(\n  cx: number,\n  cy: number,\n  startAngle: number,\n  lengthAngle: number,\n  radius: number\n): string {\n  const patchedLengthAngle = valueBetween(lengthAngle, -359.999, 359.999);\n\n  return partialCircle(\n    cx,\n    cy, // center X and Y\n    radius,\n    degreesToRadians(startAngle),\n    degreesToRadians(startAngle + patchedLengthAngle)\n  )\n    .map((command) => command.join(' '))\n    .join(' ');\n}\n\ntype Props = SVGProps<SVGPathElement> & {\n  cx: number;\n  cy: number;\n  lengthAngle: number;\n  lineWidth: number;\n  radius: number;\n  reveal?: number;\n  rounded?: boolean;\n  shift?: number;\n  startAngle: number;\n  title?: string | number;\n};\n\nexport default function ReactMinimalPieChartPath({\n  cx,\n  cy,\n  lengthAngle,\n  lineWidth,\n  radius,\n  shift = 0,\n  reveal,\n  rounded,\n  startAngle,\n  title,\n  ...props\n}: Props) {\n  const pathRadius = radius - lineWidth / 2;\n  //@NOTE This shift might be rendered as a translation in future\n  const { dx, dy } = shiftVectorAlongAngle(\n    bisectorAngle(startAngle, lengthAngle),\n    shift\n  );\n\n  const pathCommands = makePathCommands(\n    cx + dx,\n    cy + dy,\n    startAngle,\n    lengthAngle,\n    pathRadius\n  );\n  let strokeDasharray;\n  let strokeDashoffset;\n\n  // Animate/hide paths with \"stroke-dasharray\" + \"stroke-dashoffset\"\n  // https://css-tricks.com/svg-line-animation-works/\n  if (isNumber(reveal)) {\n    const pathLength = degreesToRadians(pathRadius) * lengthAngle;\n    strokeDasharray = Math.abs(pathLength);\n    strokeDashoffset =\n      strokeDasharray - extractPercentage(strokeDasharray, reveal);\n  }\n\n  return (\n    <path\n      d={pathCommands}\n      fill=\"none\"\n      strokeWidth={lineWidth}\n      strokeDasharray={strokeDasharray}\n      strokeDashoffset={strokeDashoffset}\n      strokeLinecap={rounded ? 'round' : undefined}\n      {...props}\n    >\n      {title && <title>{title}</title>}\n    </path>\n  );\n}\n", "import React from 'react';\nimport type { CSSProperties, SyntheticEvent } from 'react';\nimport Path from '../Path';\nimport { extractPercentage, functionProp, isNumber } from '../utils';\nimport type { ExtendedData, BaseDataEntry } from '../commonTypes';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\n\nfunction combineSegmentTransitionsStyle(\n  duration: number,\n  easing: string,\n  customStyle?: CSSProperties\n): { transition: string } {\n  // Merge chart's animation CSS transition with \"transition\" found to customStyle\n  let transition = `stroke-dashoffset ${duration}ms ${easing}`;\n  if (customStyle && customStyle.transition) {\n    transition = `${transition},${customStyle.transition}`;\n  }\n  return {\n    transition,\n  };\n}\n\nfunction getRevealValue<Reveal>(props: { reveal?: Reveal; animate?: boolean }) {\n  //@NOTE When animation is on, chart has to be fully revealed when reveal is not set\n  if (props.animate && !isNumber(props.reveal)) {\n    return 100;\n  }\n  return props.reveal;\n}\n\nfunction makeEventHandler<\n  Event extends SyntheticEvent,\n  Payload,\n  EventHandler extends (event: Event, payload: Payload) => void\n>(eventHandler: undefined | EventHandler, payload: Payload) {\n  return (\n    eventHandler &&\n    ((e: Event) => {\n      eventHandler(e, payload);\n    })\n  );\n}\n\nexport default function renderSegments<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>,\n  revealOverride?: null | number\n) {\n  // @NOTE this should go in Path component. Here for performance reasons\n  const reveal = revealOverride ?? getRevealValue(props);\n  const {\n    radius,\n    center: [cx, cy],\n  } = props;\n  const lineWidth = extractPercentage(radius, props.lineWidth);\n  const paths = data.map((dataEntry, index) => {\n    const segmentsStyle = functionProp(props.segmentsStyle, index);\n    return (\n      <Path\n        cx={cx}\n        cy={cy}\n        key={dataEntry.key || index}\n        lengthAngle={dataEntry.degrees}\n        lineWidth={lineWidth}\n        radius={radius}\n        rounded={props.rounded}\n        reveal={reveal}\n        shift={functionProp(props.segmentsShift, index)}\n        startAngle={dataEntry.startAngle}\n        title={dataEntry.title}\n        style={Object.assign(\n          {},\n          segmentsStyle,\n          props.animate &&\n            combineSegmentTransitionsStyle(\n              props.animationDuration,\n              props.animationEasing,\n              segmentsStyle\n            )\n        )}\n        stroke={dataEntry.color}\n        tabIndex={props.segmentsTabIndex}\n        onBlur={makeEventHandler(props.onBlur, index)}\n        onClick={makeEventHandler(props.onClick, index)}\n        onFocus={makeEventHandler(props.onFocus, index)}\n        onKeyDown={makeEventHandler(props.onKeyDown, index)}\n        onMouseOver={makeEventHandler(props.onMouseOver, index)}\n        onMouseOut={makeEventHandler(props.onMouseOut, index)}\n      />\n    );\n  });\n\n  if (props.background) {\n    paths.unshift(\n      <Path\n        cx={cx}\n        cy={cy}\n        key=\"bg\"\n        lengthAngle={props.lengthAngle}\n        lineWidth={lineWidth}\n        radius={radius}\n        rounded={props.rounded}\n        startAngle={props.startAngle}\n        stroke={props.background}\n      />\n    );\n  }\n\n  return paths;\n}\n", "import React, { useState, useEffect } from 'react';\nimport type {\n  CSSProperties,\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent,\n  ReactNode,\n} from 'react';\nimport extendData from './extendData';\nimport renderLabels from './renderLabels';\nimport renderSegments from './renderSegments';\nimport type { Data, BaseDataEntry, LabelRenderFunction } from '../commonTypes';\nimport { makePropsWithDefaults } from '../utils';\n\nexport type Props<DataEntry extends BaseDataEntry = BaseDataEntry> = {\n  animate?: boolean;\n  animationDuration?: number;\n  animationEasing?: string;\n  background?: string;\n  center?: [number, number];\n  children?: ReactNode;\n  className?: string;\n  data: Data<DataEntry>;\n  lengthAngle?: number;\n  lineWidth?: number;\n  label?: LabelRenderFunction<DataEntry>;\n  labelPosition?: number;\n  labelStyle?:\n    | CSSProperties\n    | ((dataIndex: number) => CSSProperties | undefined);\n  onBlur?: (event: FocusEvent, dataIndex: number) => void;\n  onClick?: (event: MouseEvent, dataIndex: number) => void;\n  onFocus?: (event: FocusEvent, dataIndex: number) => void;\n  onKeyDown?: (event: KeyboardEvent, dataIndex: number) => void;\n  onMouseOut?: (event: MouseEvent, dataIndex: number) => void;\n  onMouseOver?: (event: MouseEvent, dataIndex: number) => void;\n  paddingAngle?: number;\n  radius?: number;\n  reveal?: number;\n  rounded?: boolean;\n  segmentsShift?: number | ((dataIndex: number) => number | undefined);\n  segmentsStyle?:\n    | CSSProperties\n    | ((dataIndex: number) => CSSProperties | undefined);\n  segmentsTabIndex?: number;\n  startAngle?: number;\n  style?: CSSProperties;\n  totalValue?: number;\n  viewBoxSize?: [number, number];\n};\n\nexport const defaultProps = {\n  animationDuration: 500,\n  animationEasing: 'ease-out',\n  center: [50, 50] as [number, number],\n  data: [] as Data,\n  labelPosition: 50,\n  lengthAngle: 360,\n  lineWidth: 100,\n  paddingAngle: 0,\n  radius: 50,\n  startAngle: 0,\n  viewBoxSize: [100, 100] as [number, number],\n};\n\nexport type PropsWithDefaults<\n  DataEntry extends BaseDataEntry\n> = Props<DataEntry> & typeof defaultProps;\n\nexport function ReactMinimalPieChart<DataEntry extends BaseDataEntry>(\n  originalProps: Props<DataEntry>\n) {\n  const props = makePropsWithDefaults<PropsWithDefaults<DataEntry>>(\n    originalProps,\n    // @ts-expect-error: defaultProps.data is typed as BaseDataEntry\n    defaultProps\n  );\n  const [revealOverride, setRevealOverride] = useState(\n    props.animate ? 0 : null\n  );\n\n  useEffect(() => {\n    if (props.animate) {\n      // Trigger initial animation\n      setRevealOverride(null);\n    }\n  }, []);\n\n  const extendedData = extendData(props);\n  return (\n    <svg\n      viewBox={`0 0 ${props.viewBoxSize[0]} ${props.viewBoxSize[1]}`}\n      width=\"100%\"\n      height=\"100%\"\n      className={props.className}\n      style={props.style}\n    >\n      {renderSegments(extendedData, props, revealOverride)}\n      {renderLabels(extendedData, props)}\n      {props.children}\n    </svg>\n  );\n}\n"],
  "mappings": "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",
  "names": ["degreesToRadians", "degrees", "Math", "PI", "valueBetween", "value", "min", "max", "extractPercentage", "percentage", "bisectorAngle", "startAngle", "lengthAngle", "shiftVectorAlongAngle", "angle", "distance", "angleRadians", "dx", "cos", "dy", "sin", "isNumber", "functionProp", "prop", "payload", "makePropsWithDefaults", "props", "defaultProps", "result", "Object", "assign", "key", "undefined", "sumValues", "data", "sum", "i", "length", "extendData", "totalAngle", "totalValue", "paddingAngle", "chartStartAngle", "total", "normalizedTotalAngle", "numberOfPaddings", "abs", "singlePaddingDegrees", "sign", "degreesTakenByPadding", "degreesTakenByPaths", "lastSegmentEnd", "extendedData", "dataEntry", "valueInPercentage", "push", "ReactMinimalPieChartLabel", "renderLabel", "labelProps", "label", "dataIndex", "React", "isValidElement", "round", "number", "divisor", "Number", "EPSILON", "evaluateTextAnchorPosition", "labelPosition", "lineWidth", "labelHorizontalShift", "innerRadius", "makeLabelRenderProps", "map", "index", "segmentsShift", "distanceFromCenter", "radius", "labelRenderProps", "x", "center", "y", "textAnchor", "style", "labelStyle", "renderLabels", "Label", "partialCircle", "cx", "cy", "r", "start", "end", "fromX", "fromY", "toX", "toY", "large", "sweep", "module", "makePathCommands", "patchedLengthAngle", "command", "join", "ReactMinimalPieChartPath", "shift", "reveal", "rounded", "title", "pathRadius", "pathCommands", "strokeDasharray", "strokeDashoffset", "pathLength", "combineSegmentTransitionsStyle", "duration", "easing", "customStyle", "transition", "getRevealValue", "animate", "makeEventHandler", "eventHandler", "e", "renderSegments", "revealOverride", "paths", "segmentsStyle", "Path", "animationDuration", "animationEasing", "color", "segmentsTabIndex", "onBlur", "onClick", "onFocus", "onKeyDown", "onMouseOver", "onMouseOut", "background", "unshift", "viewBoxSize", "ReactMinimalPieChart", "originalProps", "useState", "setRevealOverride", "useEffect", "className", "children"]
}
